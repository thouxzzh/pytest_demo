<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="2" failures="2" skipped="1" tests="22" time="208.790" timestamp="2025-05-13T10:41:56.464473+05:30" hostname="Thoushika"><testcase classname="test_googlesearch" name="test_google_search[selenium]" time="9.369" /><testcase classname="test_googlesearch" name="test_google_search[pytest]" time="9.075" /><testcase classname="test_googlesearch" name="test_google_search[selenium_locators]" time="9.008" /><testcase classname="test_parameterize" name="test_browser[https://www.flipkart.com/-Chrome]" time="7.086" /><testcase classname="test_parameterize" name="test_browser[https://www.flipkart.com/-FireFox]" time="23.307" /><testcase classname="test_parameterize" name="test_browser[https://www.amazon.in/-Chrome]" time="5.980" /><testcase classname="test_parameterize" name="test_browser[https://www.amazon.in/-FireFox]" time="14.124" /><testcase classname="test_parameterize2" name="test_valid_product" time="34.859"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;xpath&quot;,&quot;selector&quot;:&quot;//input[@name='search']&quot;}&#10;  (Session info: chrome=136.0.7103.93); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception&#10;Stacktrace:&#10;&#09;GetHandleVerifier [0x00007FF79985CF25+75717]&#10;&#09;GetHandleVerifier [0x00007FF79985CF80+75808]&#10;&#09;(No symbol) [0x00007FF799628F9A]&#10;&#09;(No symbol) [0x00007FF79967F4C6]&#10;&#09;(No symbol) [0x00007FF79967F77C]&#10;&#09;(No symbol) [0x00007FF7996D2577]&#10;&#09;(No symbol) [0x00007FF7996A73BF]&#10;&#09;(No symbol) [0x00007FF7996CF39C]&#10;&#09;(No symbol) [0x00007FF7996A7153]&#10;&#09;(No symbol) [0x00007FF799670421]&#10;&#09;(No symbol) [0x00007FF7996711B3]&#10;&#09;GetHandleVerifier [0x00007FF799B5D6FD+3223453]&#10;&#09;GetHandleVerifier [0x00007FF799B57CA2+3200322]&#10;&#09;GetHandleVerifier [0x00007FF799B75AD3+3322739]&#10;&#09;GetHandleVerifier [0x00007FF7998769FA+180890]&#10;&#09;GetHandleVerifier [0x00007FF79987E0FF+211359]&#10;&#09;GetHandleVerifier [0x00007FF799865274+109332]&#10;&#09;GetHandleVerifier [0x00007FF799865422+109762]&#10;&#09;GetHandleVerifier [0x00007FF79984BA39+4825]&#10;&#09;BaseThreadInitThunk [0x00007FFAB169259D+29]&#10;&#09;RtlUserThreadStart [0x00007FFAB270AF58+40]">set_up_and_tear_down = None

    def test_valid_product(set_up_and_tear_down):
&gt;       driver.find_element(By.XPATH, "//input[@name='search']").send_keys("HP LP3065")

test_parameterize2.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\thous\AppData\Local\Programs\Python\Python313\Lib\site-packages\selenium\webdriver\remote\webdriver.py:917: in find_element
    return self.execute(Command.FIND_ELEMENT, {"using": by, "value": value})["value"]
C:\Users\thous\AppData\Local\Programs\Python\Python313\Lib\site-packages\selenium\webdriver\remote\webdriver.py:448: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001EC6BAA9040&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...9984BA39+4825]\\n\\tBaseThreadInitThunk [0x00007FFAB169259D+29]\\n\\tRtlUserThreadStart [0x00007FFAB270AF58+40]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//input[@name='search']"}
E         (Session info: chrome=136.0.7103.93); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
E       Stacktrace:
E       	GetHandleVerifier [0x00007FF79985CF25+75717]
E       	GetHandleVerifier [0x00007FF79985CF80+75808]
E       	(No symbol) [0x00007FF799628F9A]
E       	(No symbol) [0x00007FF79967F4C6]
E       	(No symbol) [0x00007FF79967F77C]
E       	(No symbol) [0x00007FF7996D2577]
E       	(No symbol) [0x00007FF7996A73BF]
E       	(No symbol) [0x00007FF7996CF39C]
E       	(No symbol) [0x00007FF7996A7153]
E       	(No symbol) [0x00007FF799670421]
E       	(No symbol) [0x00007FF7996711B3]
E       	GetHandleVerifier [0x00007FF799B5D6FD+3223453]
E       	GetHandleVerifier [0x00007FF799B57CA2+3200322]
E       	GetHandleVerifier [0x00007FF799B75AD3+3322739]
E       	GetHandleVerifier [0x00007FF7998769FA+180890]
E       	GetHandleVerifier [0x00007FF79987E0FF+211359]
E       	GetHandleVerifier [0x00007FF799865274+109332]
E       	GetHandleVerifier [0x00007FF799865422+109762]
E       	GetHandleVerifier [0x00007FF79984BA39+4825]
E       	BaseThreadInitThunk [0x00007FFAB169259D+29]
E       	RtlUserThreadStart [0x00007FFAB270AF58+40]

C:\Users\thous\AppData\Local\Programs\Python\Python313\Lib\site-packages\selenium\webdriver\remote\errorhandler.py:232: NoSuchElementException</failure></testcase><testcase classname="test_parameterize2" name="test_empty_product" time="43.829"><error message="failed on setup with &quot;selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT&#10;  (Session info: chrome=136.0.7103.93)&#10;Stacktrace:&#10;&#09;GetHandleVerifier [0x00007FF79985CF25+75717]&#10;&#09;GetHandleVerifier [0x00007FF79985CF80+75808]&#10;&#09;(No symbol) [0x00007FF799628F9A]&#10;&#09;(No symbol) [0x00007FF7996259F4]&#10;&#09;(No symbol) [0x00007FF799616789]&#10;&#09;(No symbol) [0x00007FF7996184F8]&#10;&#09;(No symbol) [0x00007FF799616A96]&#10;&#09;(No symbol) [0x00007FF799616516]&#10;&#09;(No symbol) [0x00007FF7996161DA]&#10;&#09;(No symbol) [0x00007FF799613E8A]&#10;&#09;(No symbol) [0x00007FF79961465C]&#10;&#09;(No symbol) [0x00007FF79962CF3A]&#10;&#09;(No symbol) [0x00007FF7996D013E]&#10;&#09;(No symbol) [0x00007FF7996A737A]&#10;&#09;(No symbol) [0x00007FF7996CF39C]&#10;&#09;(No symbol) [0x00007FF7996A7153]&#10;&#09;(No symbol) [0x00007FF799670421]&#10;&#09;(No symbol) [0x00007FF7996711B3]&#10;&#09;GetHandleVerifier [0x00007FF799B5D6FD+3223453]&#10;&#09;GetHandleVerifier [0x00007FF799B57CA2+3200322]&#10;&#09;GetHandleVerifier [0x00007FF799B75AD3+3322739]&#10;&#09;GetHandleVerifier [0x00007FF7998769FA+180890]&#10;&#09;GetHandleVerifier [0x00007FF79987E0FF+211359]&#10;&#09;GetHandleVerifier [0x00007FF799865274+109332]&#10;&#09;GetHandleVerifier [0x00007FF799865422+109762]&#10;&#09;GetHandleVerifier [0x00007FF79984BA39+4825]&#10;&#09;BaseThreadInitThunk [0x00007FFAB169259D+29]&#10;&#09;RtlUserThreadStart [0x00007FFAB270AF58+40]&quot;">@pytest.fixture()
    def set_up_and_tear_down():
        global driver
        driver = webdriver.Chrome()
        driver.maximize_window()
        driver.implicitly_wait(10)
&gt;       driver.get("https://tutorialsninja.com/demo/")

test_parameterize2.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\thous\AppData\Local\Programs\Python\Python313\Lib\site-packages\selenium\webdriver\remote\webdriver.py:473: in get
    self.execute(Command.GET, {"url": url})
C:\Users\thous\AppData\Local\Programs\Python\Python313\Lib\site-packages\selenium\webdriver\remote\webdriver.py:448: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001EC6BA6AC50&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"unknown error: net::ERR_CONNECTION_TIMED_OUT\\n...9984BA39+4825]\\n\\tBaseThreadInitThunk [0x00007FFAB169259D+29]\\n\\tRtlUserThreadStart [0x00007FFAB270AF58+40]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT
E         (Session info: chrome=136.0.7103.93)
E       Stacktrace:
E       	GetHandleVerifier [0x00007FF79985CF25+75717]
E       	GetHandleVerifier [0x00007FF79985CF80+75808]
E       	(No symbol) [0x00007FF799628F9A]
E       	(No symbol) [0x00007FF7996259F4]
E       	(No symbol) [0x00007FF799616789]
E       	(No symbol) [0x00007FF7996184F8]
E       	(No symbol) [0x00007FF799616A96]
E       	(No symbol) [0x00007FF799616516]
E       	(No symbol) [0x00007FF7996161DA]
E       	(No symbol) [0x00007FF799613E8A]
E       	(No symbol) [0x00007FF79961465C]
E       	(No symbol) [0x00007FF79962CF3A]
E       	(No symbol) [0x00007FF7996D013E]
E       	(No symbol) [0x00007FF7996A737A]
E       	(No symbol) [0x00007FF7996CF39C]
E       	(No symbol) [0x00007FF7996A7153]
E       	(No symbol) [0x00007FF799670421]
E       	(No symbol) [0x00007FF7996711B3]
E       	GetHandleVerifier [0x00007FF799B5D6FD+3223453]
E       	GetHandleVerifier [0x00007FF799B57CA2+3200322]
E       	GetHandleVerifier [0x00007FF799B75AD3+3322739]
E       	GetHandleVerifier [0x00007FF7998769FA+180890]
E       	GetHandleVerifier [0x00007FF79987E0FF+211359]
E       	GetHandleVerifier [0x00007FF799865274+109332]
E       	GetHandleVerifier [0x00007FF799865422+109762]
E       	GetHandleVerifier [0x00007FF79984BA39+4825]
E       	BaseThreadInitThunk [0x00007FFAB169259D+29]
E       	RtlUserThreadStart [0x00007FFAB270AF58+40]

C:\Users\thous\AppData\Local\Programs\Python\Python313\Lib\site-packages\selenium\webdriver\remote\errorhandler.py:232: WebDriverException</error></testcase><testcase classname="test_parameterize2" name="test_invalid_product" time="43.614"><error message="failed on setup with &quot;selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT&#10;  (Session info: chrome=136.0.7103.93)&#10;Stacktrace:&#10;&#09;GetHandleVerifier [0x00007FF79985CF25+75717]&#10;&#09;GetHandleVerifier [0x00007FF79985CF80+75808]&#10;&#09;(No symbol) [0x00007FF799628F9A]&#10;&#09;(No symbol) [0x00007FF7996259F4]&#10;&#09;(No symbol) [0x00007FF799616789]&#10;&#09;(No symbol) [0x00007FF7996184F8]&#10;&#09;(No symbol) [0x00007FF799616A96]&#10;&#09;(No symbol) [0x00007FF799616516]&#10;&#09;(No symbol) [0x00007FF7996161DA]&#10;&#09;(No symbol) [0x00007FF799613E8A]&#10;&#09;(No symbol) [0x00007FF79961465C]&#10;&#09;(No symbol) [0x00007FF79962CF3A]&#10;&#09;(No symbol) [0x00007FF7996D013E]&#10;&#09;(No symbol) [0x00007FF7996A737A]&#10;&#09;(No symbol) [0x00007FF7996CF39C]&#10;&#09;(No symbol) [0x00007FF7996A7153]&#10;&#09;(No symbol) [0x00007FF799670421]&#10;&#09;(No symbol) [0x00007FF7996711B3]&#10;&#09;GetHandleVerifier [0x00007FF799B5D6FD+3223453]&#10;&#09;GetHandleVerifier [0x00007FF799B57CA2+3200322]&#10;&#09;GetHandleVerifier [0x00007FF799B75AD3+3322739]&#10;&#09;GetHandleVerifier [0x00007FF7998769FA+180890]&#10;&#09;GetHandleVerifier [0x00007FF79987E0FF+211359]&#10;&#09;GetHandleVerifier [0x00007FF799865274+109332]&#10;&#09;GetHandleVerifier [0x00007FF799865422+109762]&#10;&#09;GetHandleVerifier [0x00007FF79984BA39+4825]&#10;&#09;BaseThreadInitThunk [0x00007FFAB169259D+29]&#10;&#09;RtlUserThreadStart [0x00007FFAB270AF58+40]&quot;">@pytest.fixture()
    def set_up_and_tear_down():
        global driver
        driver = webdriver.Chrome()
        driver.maximize_window()
        driver.implicitly_wait(10)
&gt;       driver.get("https://tutorialsninja.com/demo/")

test_parameterize2.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\thous\AppData\Local\Programs\Python\Python313\Lib\site-packages\selenium\webdriver\remote\webdriver.py:473: in get
    self.execute(Command.GET, {"url": url})
C:\Users\thous\AppData\Local\Programs\Python\Python313\Lib\site-packages\selenium\webdriver\remote\webdriver.py:448: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001EC6BA6BA50&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"unknown error: net::ERR_CONNECTION_TIMED_OUT\\n...9984BA39+4825]\\n\\tBaseThreadInitThunk [0x00007FFAB169259D+29]\\n\\tRtlUserThreadStart [0x00007FFAB270AF58+40]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT
E         (Session info: chrome=136.0.7103.93)
E       Stacktrace:
E       	GetHandleVerifier [0x00007FF79985CF25+75717]
E       	GetHandleVerifier [0x00007FF79985CF80+75808]
E       	(No symbol) [0x00007FF799628F9A]
E       	(No symbol) [0x00007FF7996259F4]
E       	(No symbol) [0x00007FF799616789]
E       	(No symbol) [0x00007FF7996184F8]
E       	(No symbol) [0x00007FF799616A96]
E       	(No symbol) [0x00007FF799616516]
E       	(No symbol) [0x00007FF7996161DA]
E       	(No symbol) [0x00007FF799613E8A]
E       	(No symbol) [0x00007FF79961465C]
E       	(No symbol) [0x00007FF79962CF3A]
E       	(No symbol) [0x00007FF7996D013E]
E       	(No symbol) [0x00007FF7996A737A]
E       	(No symbol) [0x00007FF7996CF39C]
E       	(No symbol) [0x00007FF7996A7153]
E       	(No symbol) [0x00007FF799670421]
E       	(No symbol) [0x00007FF7996711B3]
E       	GetHandleVerifier [0x00007FF799B5D6FD+3223453]
E       	GetHandleVerifier [0x00007FF799B57CA2+3200322]
E       	GetHandleVerifier [0x00007FF799B75AD3+3322739]
E       	GetHandleVerifier [0x00007FF7998769FA+180890]
E       	GetHandleVerifier [0x00007FF79987E0FF+211359]
E       	GetHandleVerifier [0x00007FF799865274+109332]
E       	GetHandleVerifier [0x00007FF799865422+109762]
E       	GetHandleVerifier [0x00007FF79984BA39+4825]
E       	BaseThreadInitThunk [0x00007FFAB169259D+29]
E       	RtlUserThreadStart [0x00007FFAB270AF58+40]

C:\Users\thous\AppData\Local\Programs\Python\Python313\Lib\site-packages\selenium\webdriver\remote\errorhandler.py:232: WebDriverException</error></testcase><testcase classname="test_sam" name="test_sam1" time="0.001" /><testcase classname="test_sam" name="test_sam2" time="0.001" /><testcase classname="test_sam" name="test_sam3" time="0.000" /><testcase classname="test_sample" name="test_sam1" time="0.001" /><testcase classname="test_sample" name="test_sam2" time="0.001" /><testcase classname="test_sample" name="test_sam3" time="0.000" /><testcase classname="test_sample" name="test_sam4" time="0.000" /><testcase classname="test_sample" name="test_sam5" time="0.001"><skipped type="pytest.xfail" message="Expected to fail" /></testcase><testcase classname="test_sample" name="test_sam6" time="0.001" /><testcase classname="test_sample" name="test_addition[1-3]" time="0.000" /><testcase classname="test_sample" name="test_addition[3-6]" time="0.001"><failure message="assert (3 + 2) == 6">test_input = 3, expected = 6

    @pytest.mark.parametrize("test_input,expected",[(1,3),(3,6),(5,7)])
    def test_addition(test_input,expected):
&gt;       assert test_input +2 ==expected
E       assert (3 + 2) == 6

test_sample.py:41: AssertionError</failure></testcase><testcase classname="test_sample" name="test_addition[5-7]" time="0.000" /></testsuite></testsuites>